pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  
  tools {
    jdk 'JDK 21'          // Ensure this matches the JDK name in Jenkins global tools
    maven 'Maven 3.9.4'   // Optional: if Maven is managed via Jenkins tools
  }

  environment {
    SONAR_URL = "http://51.143.219.233:9000"
    DOCKER_IMAGE_BASE = "abhishekf5/ultimate-cicd"
    GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    GIT_USER_NAME = "Jaaki26"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/Jaaki26/Jenkins-Zero-To-Hero.git'
      }
    }

    stage('Build and Test') {
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          sh 'java -version'        // Confirm JDK 21 is used
          sh 'mvn clean package'
        }
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
            sh "mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}"
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "${DOCKER_IMAGE_BASE}:${BUILD_NUMBER}"
      }
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          sh "docker build -t ${DOCKER_IMAGE} ."
          script {
            docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
              docker.image("${DOCKER_IMAGE}").push()
            }
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests') {
            sh """
              git config user.email "padala.janakiram26@gmail.com"
              git config user.name "Abhishek Veeramalla"
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml
              git add deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
            """
          }
        }
      }
    }
  }

  post {
    success {
      echo "Pipeline completed successfully for build ${BUILD_NUMBER}!"
    }
    failure {
      echo "Pipeline failed for build ${BUILD_NUMBER}."
    }
  }
}
